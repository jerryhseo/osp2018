/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icebreaker.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.icebreaker.model.OSPSchedulerEntry;
import com.kisti.osp.icebreaker.model.OSPSchedulerEntryModel;
import com.kisti.osp.icebreaker.model.OSPSchedulerEntrySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the OSPSchedulerEntry service. Represents a row in the &quot;icebreaker_OSPSchedulerEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OSPSchedulerEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OSPSchedulerEntryImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see OSPSchedulerEntryImpl
 * @see OSPSchedulerEntry
 * @see OSPSchedulerEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class OSPSchedulerEntryModelImpl extends BaseModelImpl<OSPSchedulerEntry>
	implements OSPSchedulerEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a osp scheduler entry model instance should use the {@link OSPSchedulerEntry} interface instead.
	 */
	public static final String TABLE_NAME = "icebreaker_OSPSchedulerEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "schedulerEntryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "accessMethod", Types.VARCHAR },
			{ "authorizedUser", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "description", Types.VARCHAR },
			{ "serverIp", Types.VARCHAR },
			{ "sshPort", Types.VARCHAR },
			{ "templateDir", Types.VARCHAR },
			{ "templateRealDir", Types.VARCHAR },
			{ "authorizedPassword", Types.VARCHAR },
			{ "schedulerClass", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accessMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverIp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sshPort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("templateDir", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("templateRealDir", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerClass", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table icebreaker_OSPSchedulerEntry (uuid_ VARCHAR(75) null,schedulerEntryId LONG not null primary key,name VARCHAR(75) null,version VARCHAR(75) null,className VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,accessMethod VARCHAR(75) null,authorizedUser VARCHAR(75) null,status INTEGER,description STRING null,serverIp VARCHAR(75) null,sshPort VARCHAR(75) null,templateDir VARCHAR(75) null,templateRealDir VARCHAR(75) null,authorizedPassword VARCHAR(75) null,schedulerClass VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table icebreaker_OSPSchedulerEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY ospSchedulerEntry.name ASC, ospSchedulerEntry.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY icebreaker_OSPSchedulerEntry.name ASC, icebreaker_OSPSchedulerEntry.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icebreaker.model.OSPSchedulerEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icebreaker.model.OSPSchedulerEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icebreaker.model.OSPSchedulerEntry"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long VERSION_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OSPSchedulerEntry toModel(OSPSchedulerEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OSPSchedulerEntry model = new OSPSchedulerEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setSchedulerEntryId(soapModel.getSchedulerEntryId());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setClassName(soapModel.getClassName());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAccessMethod(soapModel.getAccessMethod());
		model.setAuthorizedUser(soapModel.getAuthorizedUser());
		model.setStatus(soapModel.getStatus());
		model.setDescription(soapModel.getDescription());
		model.setServerIp(soapModel.getServerIp());
		model.setSshPort(soapModel.getSshPort());
		model.setTemplateDir(soapModel.getTemplateDir());
		model.setTemplateRealDir(soapModel.getTemplateRealDir());
		model.setAuthorizedPassword(soapModel.getAuthorizedPassword());
		model.setSchedulerClass(soapModel.getSchedulerClass());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OSPSchedulerEntry> toModels(
		OSPSchedulerEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OSPSchedulerEntry> models = new ArrayList<OSPSchedulerEntry>(soapModels.length);

		for (OSPSchedulerEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icebreaker.model.OSPSchedulerEntry"));

	public OSPSchedulerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schedulerEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchedulerEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schedulerEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OSPSchedulerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return OSPSchedulerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("schedulerEntryId", getSchedulerEntryId());
		attributes.put("name", getName());
		attributes.put("version", getVersion());
		attributes.put("className", getClassName());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("accessMethod", getAccessMethod());
		attributes.put("authorizedUser", getAuthorizedUser());
		attributes.put("status", getStatus());
		attributes.put("description", getDescription());
		attributes.put("serverIp", getServerIp());
		attributes.put("sshPort", getSshPort());
		attributes.put("templateDir", getTemplateDir());
		attributes.put("templateRealDir", getTemplateRealDir());
		attributes.put("authorizedPassword", getAuthorizedPassword());
		attributes.put("schedulerClass", getSchedulerClass());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long schedulerEntryId = (Long)attributes.get("schedulerEntryId");

		if (schedulerEntryId != null) {
			setSchedulerEntryId(schedulerEntryId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String accessMethod = (String)attributes.get("accessMethod");

		if (accessMethod != null) {
			setAccessMethod(accessMethod);
		}

		String authorizedUser = (String)attributes.get("authorizedUser");

		if (authorizedUser != null) {
			setAuthorizedUser(authorizedUser);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String serverIp = (String)attributes.get("serverIp");

		if (serverIp != null) {
			setServerIp(serverIp);
		}

		String sshPort = (String)attributes.get("sshPort");

		if (sshPort != null) {
			setSshPort(sshPort);
		}

		String templateDir = (String)attributes.get("templateDir");

		if (templateDir != null) {
			setTemplateDir(templateDir);
		}

		String templateRealDir = (String)attributes.get("templateRealDir");

		if (templateRealDir != null) {
			setTemplateRealDir(templateRealDir);
		}

		String authorizedPassword = (String)attributes.get("authorizedPassword");

		if (authorizedPassword != null) {
			setAuthorizedPassword(authorizedPassword);
		}

		String schedulerClass = (String)attributes.get("schedulerClass");

		if (schedulerClass != null) {
			setSchedulerClass(schedulerClass);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSchedulerEntryId() {
		return _schedulerEntryId;
	}

	@Override
	public void setSchedulerEntryId(long schedulerEntryId) {
		_schedulerEntryId = schedulerEntryId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_columnBitmask = -1L;

		if (_originalVersion == null) {
			_originalVersion = _version;
		}

		_version = version;
	}

	public String getOriginalVersion() {
		return GetterUtil.getString(_originalVersion);
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_className = className;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAccessMethod() {
		if (_accessMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessMethod;
		}
	}

	@Override
	public void setAccessMethod(String accessMethod) {
		_accessMethod = accessMethod;
	}

	@JSON
	@Override
	public String getAuthorizedUser() {
		if (_authorizedUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorizedUser;
		}
	}

	@Override
	public void setAuthorizedUser(String authorizedUser) {
		_authorizedUser = authorizedUser;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getServerIp() {
		if (_serverIp == null) {
			return StringPool.BLANK;
		}
		else {
			return _serverIp;
		}
	}

	@Override
	public void setServerIp(String serverIp) {
		_serverIp = serverIp;
	}

	@JSON
	@Override
	public String getSshPort() {
		if (_sshPort == null) {
			return StringPool.BLANK;
		}
		else {
			return _sshPort;
		}
	}

	@Override
	public void setSshPort(String sshPort) {
		_sshPort = sshPort;
	}

	@JSON
	@Override
	public String getTemplateDir() {
		if (_templateDir == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateDir;
		}
	}

	@Override
	public void setTemplateDir(String templateDir) {
		_templateDir = templateDir;
	}

	@JSON
	@Override
	public String getTemplateRealDir() {
		if (_templateRealDir == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateRealDir;
		}
	}

	@Override
	public void setTemplateRealDir(String templateRealDir) {
		_templateRealDir = templateRealDir;
	}

	@JSON
	@Override
	public String getAuthorizedPassword() {
		if (_authorizedPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorizedPassword;
		}
	}

	@Override
	public void setAuthorizedPassword(String authorizedPassword) {
		_authorizedPassword = authorizedPassword;
	}

	@JSON
	@Override
	public String getSchedulerClass() {
		if (_schedulerClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _schedulerClass;
		}
	}

	@Override
	public void setSchedulerClass(String schedulerClass) {
		_schedulerClass = schedulerClass;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				OSPSchedulerEntry.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OSPSchedulerEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(OSPSchedulerEntry.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public OSPSchedulerEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OSPSchedulerEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OSPSchedulerEntryImpl ospSchedulerEntryImpl = new OSPSchedulerEntryImpl();

		ospSchedulerEntryImpl.setUuid(getUuid());
		ospSchedulerEntryImpl.setSchedulerEntryId(getSchedulerEntryId());
		ospSchedulerEntryImpl.setName(getName());
		ospSchedulerEntryImpl.setVersion(getVersion());
		ospSchedulerEntryImpl.setClassName(getClassName());
		ospSchedulerEntryImpl.setGroupId(getGroupId());
		ospSchedulerEntryImpl.setCompanyId(getCompanyId());
		ospSchedulerEntryImpl.setUserId(getUserId());
		ospSchedulerEntryImpl.setCreateDate(getCreateDate());
		ospSchedulerEntryImpl.setModifiedDate(getModifiedDate());
		ospSchedulerEntryImpl.setAccessMethod(getAccessMethod());
		ospSchedulerEntryImpl.setAuthorizedUser(getAuthorizedUser());
		ospSchedulerEntryImpl.setStatus(getStatus());
		ospSchedulerEntryImpl.setDescription(getDescription());
		ospSchedulerEntryImpl.setServerIp(getServerIp());
		ospSchedulerEntryImpl.setSshPort(getSshPort());
		ospSchedulerEntryImpl.setTemplateDir(getTemplateDir());
		ospSchedulerEntryImpl.setTemplateRealDir(getTemplateRealDir());
		ospSchedulerEntryImpl.setAuthorizedPassword(getAuthorizedPassword());
		ospSchedulerEntryImpl.setSchedulerClass(getSchedulerClass());

		ospSchedulerEntryImpl.resetOriginalValues();

		return ospSchedulerEntryImpl;
	}

	@Override
	public int compareTo(OSPSchedulerEntry ospSchedulerEntry) {
		int value = 0;

		value = getName().compareTo(ospSchedulerEntry.getName());

		if (value != 0) {
			return value;
		}

		value = getVersion().compareTo(ospSchedulerEntry.getVersion());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OSPSchedulerEntry)) {
			return false;
		}

		OSPSchedulerEntry ospSchedulerEntry = (OSPSchedulerEntry)obj;

		long primaryKey = ospSchedulerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OSPSchedulerEntryModelImpl ospSchedulerEntryModelImpl = this;

		ospSchedulerEntryModelImpl._originalUuid = ospSchedulerEntryModelImpl._uuid;

		ospSchedulerEntryModelImpl._originalName = ospSchedulerEntryModelImpl._name;

		ospSchedulerEntryModelImpl._originalVersion = ospSchedulerEntryModelImpl._version;

		ospSchedulerEntryModelImpl._originalGroupId = ospSchedulerEntryModelImpl._groupId;

		ospSchedulerEntryModelImpl._setOriginalGroupId = false;

		ospSchedulerEntryModelImpl._originalCompanyId = ospSchedulerEntryModelImpl._companyId;

		ospSchedulerEntryModelImpl._setOriginalCompanyId = false;

		ospSchedulerEntryModelImpl._setModifiedDate = false;

		ospSchedulerEntryModelImpl._originalStatus = ospSchedulerEntryModelImpl._status;

		ospSchedulerEntryModelImpl._setOriginalStatus = false;

		ospSchedulerEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OSPSchedulerEntry> toCacheModel() {
		OSPSchedulerEntryCacheModel ospSchedulerEntryCacheModel = new OSPSchedulerEntryCacheModel();

		ospSchedulerEntryCacheModel.uuid = getUuid();

		String uuid = ospSchedulerEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ospSchedulerEntryCacheModel.uuid = null;
		}

		ospSchedulerEntryCacheModel.schedulerEntryId = getSchedulerEntryId();

		ospSchedulerEntryCacheModel.name = getName();

		String name = ospSchedulerEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ospSchedulerEntryCacheModel.name = null;
		}

		ospSchedulerEntryCacheModel.version = getVersion();

		String version = ospSchedulerEntryCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			ospSchedulerEntryCacheModel.version = null;
		}

		ospSchedulerEntryCacheModel.className = getClassName();

		String className = ospSchedulerEntryCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			ospSchedulerEntryCacheModel.className = null;
		}

		ospSchedulerEntryCacheModel.groupId = getGroupId();

		ospSchedulerEntryCacheModel.companyId = getCompanyId();

		ospSchedulerEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ospSchedulerEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			ospSchedulerEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ospSchedulerEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ospSchedulerEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ospSchedulerEntryCacheModel.accessMethod = getAccessMethod();

		String accessMethod = ospSchedulerEntryCacheModel.accessMethod;

		if ((accessMethod != null) && (accessMethod.length() == 0)) {
			ospSchedulerEntryCacheModel.accessMethod = null;
		}

		ospSchedulerEntryCacheModel.authorizedUser = getAuthorizedUser();

		String authorizedUser = ospSchedulerEntryCacheModel.authorizedUser;

		if ((authorizedUser != null) && (authorizedUser.length() == 0)) {
			ospSchedulerEntryCacheModel.authorizedUser = null;
		}

		ospSchedulerEntryCacheModel.status = getStatus();

		ospSchedulerEntryCacheModel.description = getDescription();

		String description = ospSchedulerEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ospSchedulerEntryCacheModel.description = null;
		}

		ospSchedulerEntryCacheModel.serverIp = getServerIp();

		String serverIp = ospSchedulerEntryCacheModel.serverIp;

		if ((serverIp != null) && (serverIp.length() == 0)) {
			ospSchedulerEntryCacheModel.serverIp = null;
		}

		ospSchedulerEntryCacheModel.sshPort = getSshPort();

		String sshPort = ospSchedulerEntryCacheModel.sshPort;

		if ((sshPort != null) && (sshPort.length() == 0)) {
			ospSchedulerEntryCacheModel.sshPort = null;
		}

		ospSchedulerEntryCacheModel.templateDir = getTemplateDir();

		String templateDir = ospSchedulerEntryCacheModel.templateDir;

		if ((templateDir != null) && (templateDir.length() == 0)) {
			ospSchedulerEntryCacheModel.templateDir = null;
		}

		ospSchedulerEntryCacheModel.templateRealDir = getTemplateRealDir();

		String templateRealDir = ospSchedulerEntryCacheModel.templateRealDir;

		if ((templateRealDir != null) && (templateRealDir.length() == 0)) {
			ospSchedulerEntryCacheModel.templateRealDir = null;
		}

		ospSchedulerEntryCacheModel.authorizedPassword = getAuthorizedPassword();

		String authorizedPassword = ospSchedulerEntryCacheModel.authorizedPassword;

		if ((authorizedPassword != null) && (authorizedPassword.length() == 0)) {
			ospSchedulerEntryCacheModel.authorizedPassword = null;
		}

		ospSchedulerEntryCacheModel.schedulerClass = getSchedulerClass();

		String schedulerClass = ospSchedulerEntryCacheModel.schedulerClass;

		if ((schedulerClass != null) && (schedulerClass.length() == 0)) {
			ospSchedulerEntryCacheModel.schedulerClass = null;
		}

		return ospSchedulerEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", schedulerEntryId=");
		sb.append(getSchedulerEntryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", accessMethod=");
		sb.append(getAccessMethod());
		sb.append(", authorizedUser=");
		sb.append(getAuthorizedUser());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", serverIp=");
		sb.append(getServerIp());
		sb.append(", sshPort=");
		sb.append(getSshPort());
		sb.append(", templateDir=");
		sb.append(getTemplateDir());
		sb.append(", templateRealDir=");
		sb.append(getTemplateRealDir());
		sb.append(", authorizedPassword=");
		sb.append(getAuthorizedPassword());
		sb.append(", schedulerClass=");
		sb.append(getSchedulerClass());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icebreaker.model.OSPSchedulerEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulerEntryId</column-name><column-value><![CDATA[");
		sb.append(getSchedulerEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessMethod</column-name><column-value><![CDATA[");
		sb.append(getAccessMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorizedUser</column-name><column-value><![CDATA[");
		sb.append(getAuthorizedUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverIp</column-name><column-value><![CDATA[");
		sb.append(getServerIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sshPort</column-name><column-value><![CDATA[");
		sb.append(getSshPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateDir</column-name><column-value><![CDATA[");
		sb.append(getTemplateDir());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateRealDir</column-name><column-value><![CDATA[");
		sb.append(getTemplateRealDir());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorizedPassword</column-name><column-value><![CDATA[");
		sb.append(getAuthorizedPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulerClass</column-name><column-value><![CDATA[");
		sb.append(getSchedulerClass());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OSPSchedulerEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OSPSchedulerEntry.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _schedulerEntryId;
	private String _name;
	private String _originalName;
	private String _version;
	private String _originalVersion;
	private String _className;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _accessMethod;
	private String _authorizedUser;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _serverIp;
	private String _sshPort;
	private String _templateDir;
	private String _templateRealDir;
	private String _authorizedPassword;
	private String _schedulerClass;
	private long _columnBitmask;
	private OSPSchedulerEntry _escapedModel;
}