/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icebreaker.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.icebreaker.model.JobData;
import com.kisti.osp.icebreaker.model.JobDataModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the JobData service. Represents a row in the &quot;icebreaker_JobData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JobDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobDataImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see JobDataImpl
 * @see JobData
 * @see JobDataModel
 * @generated
 */
@ProviderType
public class JobDataModelImpl extends BaseModelImpl<JobData>
	implements JobDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job data model instance should use the {@link JobData} interface instead.
	 */
	public static final String TABLE_NAME = "icebreaker_JobData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobId", Types.BIGINT },
			{ "inputData", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inputData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table icebreaker_JobData (jobId LONG not null primary key,inputData VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table icebreaker_JobData";
	public static final String ORDER_BY_JPQL = " ORDER BY jobData.jobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icebreaker_JobData.jobId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icebreaker.model.JobData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icebreaker.model.JobData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icebreaker.model.JobData"));

	public JobDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobData.class;
	}

	@Override
	public String getModelClassName() {
		return JobData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobId", getJobId());
		attributes.put("inputData", getInputData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		String inputData = (String)attributes.get("inputData");

		if (inputData != null) {
			setInputData(inputData);
		}
	}

	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_jobId = jobId;
	}

	@Override
	public String getInputData() {
		if (_inputData == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputData;
		}
	}

	@Override
	public void setInputData(String inputData) {
		_inputData = inputData;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			JobData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobDataImpl jobDataImpl = new JobDataImpl();

		jobDataImpl.setJobId(getJobId());
		jobDataImpl.setInputData(getInputData());

		jobDataImpl.resetOriginalValues();

		return jobDataImpl;
	}

	@Override
	public int compareTo(JobData jobData) {
		long primaryKey = jobData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobData)) {
			return false;
		}

		JobData jobData = (JobData)obj;

		long primaryKey = jobData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobData> toCacheModel() {
		JobDataCacheModel jobDataCacheModel = new JobDataCacheModel();

		jobDataCacheModel.jobId = getJobId();

		jobDataCacheModel.inputData = getInputData();

		String inputData = jobDataCacheModel.inputData;

		if ((inputData != null) && (inputData.length() == 0)) {
			jobDataCacheModel.inputData = null;
		}

		return jobDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{jobId=");
		sb.append(getJobId());
		sb.append(", inputData=");
		sb.append(getInputData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icebreaker.model.JobData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputData</column-name><column-value><![CDATA[");
		sb.append(getInputData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = JobData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			JobData.class
		};
	private long _jobId;
	private String _inputData;
	private JobData _escapedModel;
}