/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icebreaker.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.icebreaker.model.Job;
import com.kisti.osp.icebreaker.model.JobModel;
import com.kisti.osp.icebreaker.model.JobSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Job service. Represents a row in the &quot;icebreaker_Job&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JobModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see JobImpl
 * @see Job
 * @see JobModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JobModelImpl extends BaseModelImpl<Job> implements JobModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job model instance should use the {@link Job} interface instead.
	 */
	public static final String TABLE_NAME = "icebreaker_Job";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "jobId", Types.BIGINT },
			{ "jobName", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "simulationId", Types.BIGINT },
			{ "schedulerId", Types.BIGINT },
			{ "workflowId", Types.BIGINT },
			{ "solverExe", Types.VARCHAR },
			{ "workingDir", Types.VARCHAR },
			{ "runType", Types.VARCHAR },
			{ "logFileName", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "queueName", Types.VARCHAR },
			{ "command", Types.VARCHAR },
			{ "referenceFiles", Types.VARCHAR },
			{ "environmentVars", Types.VARCHAR },
			{ "nodes", Types.INTEGER },
			{ "processorsPerNode", Types.INTEGER },
			{ "wallTime", Types.VARCHAR },
			{ "eligibleTime", Types.VARCHAR },
			{ "afterAny", Types.VARCHAR },
			{ "afterOk", Types.VARCHAR },
			{ "submitArgs", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "jobStatus", Types.INTEGER },
			{ "reserveResults", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "queuedDate", Types.TIMESTAMP },
			{ "startDate", Types.TIMESTAMP },
			{ "completeDate", Types.TIMESTAMP },
			{ "usedMemory", Types.VARCHAR },
			{ "usedCpuTime", Types.VARCHAR },
			{ "usedWalltime", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("simulationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("schedulerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("solverExe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workingDir", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("runType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("logFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("queueName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("command", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceFiles", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("environmentVars", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nodes", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("processorsPerNode", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wallTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eligibleTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("afterAny", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("afterOk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submitArgs", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("jobStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reserveResults", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("queuedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("completeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("usedMemory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usedCpuTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usedWalltime", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table icebreaker_Job (uuid_ VARCHAR(75) null,jobId LONG not null primary key,jobName VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,simulationId LONG,schedulerId LONG,workflowId LONG,solverExe VARCHAR(75) null,workingDir VARCHAR(75) null,runType VARCHAR(75) null,logFileName VARCHAR(75) null,title VARCHAR(75) null,queueName VARCHAR(75) null,command VARCHAR(75) null,referenceFiles VARCHAR(75) null,environmentVars VARCHAR(75) null,nodes INTEGER,processorsPerNode INTEGER,wallTime VARCHAR(75) null,eligibleTime VARCHAR(75) null,afterAny VARCHAR(75) null,afterOk VARCHAR(75) null,submitArgs VARCHAR(75) null,status INTEGER,jobStatus INTEGER,reserveResults BOOLEAN,createDate DATE null,modifiedDate DATE null,queuedDate DATE null,startDate DATE null,completeDate DATE null,usedMemory VARCHAR(75) null,usedCpuTime VARCHAR(75) null,usedWalltime VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table icebreaker_Job";
	public static final String ORDER_BY_JPQL = " ORDER BY job.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY icebreaker_Job.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icebreaker.model.Job"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icebreaker.model.Job"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icebreaker.model.Job"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long JOBID_COLUMN_BITMASK = 4L;
	public static final long JOBSTATUS_COLUMN_BITMASK = 8L;
	public static final long QUEUENAME_COLUMN_BITMASK = 16L;
	public static final long RUNTYPE_COLUMN_BITMASK = 32L;
	public static final long SCHEDULERID_COLUMN_BITMASK = 64L;
	public static final long SIMULATIONID_COLUMN_BITMASK = 128L;
	public static final long STATUS_COLUMN_BITMASK = 256L;
	public static final long TITLE_COLUMN_BITMASK = 512L;
	public static final long USERID_COLUMN_BITMASK = 1024L;
	public static final long UUID_COLUMN_BITMASK = 2048L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4096L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Job toModel(JobSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Job model = new JobImpl();

		model.setUuid(soapModel.getUuid());
		model.setJobId(soapModel.getJobId());
		model.setJobName(soapModel.getJobName());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setSimulationId(soapModel.getSimulationId());
		model.setSchedulerId(soapModel.getSchedulerId());
		model.setWorkflowId(soapModel.getWorkflowId());
		model.setSolverExe(soapModel.getSolverExe());
		model.setWorkingDir(soapModel.getWorkingDir());
		model.setRunType(soapModel.getRunType());
		model.setLogFileName(soapModel.getLogFileName());
		model.setTitle(soapModel.getTitle());
		model.setQueueName(soapModel.getQueueName());
		model.setCommand(soapModel.getCommand());
		model.setReferenceFiles(soapModel.getReferenceFiles());
		model.setEnvironmentVars(soapModel.getEnvironmentVars());
		model.setNodes(soapModel.getNodes());
		model.setProcessorsPerNode(soapModel.getProcessorsPerNode());
		model.setWallTime(soapModel.getWallTime());
		model.setEligibleTime(soapModel.getEligibleTime());
		model.setAfterAny(soapModel.getAfterAny());
		model.setAfterOk(soapModel.getAfterOk());
		model.setSubmitArgs(soapModel.getSubmitArgs());
		model.setStatus(soapModel.getStatus());
		model.setJobStatus(soapModel.getJobStatus());
		model.setReserveResults(soapModel.getReserveResults());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setQueuedDate(soapModel.getQueuedDate());
		model.setStartDate(soapModel.getStartDate());
		model.setCompleteDate(soapModel.getCompleteDate());
		model.setUsedMemory(soapModel.getUsedMemory());
		model.setUsedCpuTime(soapModel.getUsedCpuTime());
		model.setUsedWalltime(soapModel.getUsedWalltime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Job> toModels(JobSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Job> models = new ArrayList<Job>(soapModels.length);

		for (JobSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.icebreaker.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icebreaker.model.Job"));

	public JobModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Job.class;
	}

	@Override
	public String getModelClassName() {
		return Job.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("jobId", getJobId());
		attributes.put("jobName", getJobName());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("simulationId", getSimulationId());
		attributes.put("schedulerId", getSchedulerId());
		attributes.put("workflowId", getWorkflowId());
		attributes.put("solverExe", getSolverExe());
		attributes.put("workingDir", getWorkingDir());
		attributes.put("runType", getRunType());
		attributes.put("logFileName", getLogFileName());
		attributes.put("title", getTitle());
		attributes.put("queueName", getQueueName());
		attributes.put("command", getCommand());
		attributes.put("referenceFiles", getReferenceFiles());
		attributes.put("environmentVars", getEnvironmentVars());
		attributes.put("nodes", getNodes());
		attributes.put("processorsPerNode", getProcessorsPerNode());
		attributes.put("wallTime", getWallTime());
		attributes.put("eligibleTime", getEligibleTime());
		attributes.put("afterAny", getAfterAny());
		attributes.put("afterOk", getAfterOk());
		attributes.put("submitArgs", getSubmitArgs());
		attributes.put("status", getStatus());
		attributes.put("jobStatus", getJobStatus());
		attributes.put("reserveResults", getReserveResults());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("queuedDate", getQueuedDate());
		attributes.put("startDate", getStartDate());
		attributes.put("completeDate", getCompleteDate());
		attributes.put("usedMemory", getUsedMemory());
		attributes.put("usedCpuTime", getUsedCpuTime());
		attributes.put("usedWalltime", getUsedWalltime());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		String jobName = (String)attributes.get("jobName");

		if (jobName != null) {
			setJobName(jobName);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long simulationId = (Long)attributes.get("simulationId");

		if (simulationId != null) {
			setSimulationId(simulationId);
		}

		Long schedulerId = (Long)attributes.get("schedulerId");

		if (schedulerId != null) {
			setSchedulerId(schedulerId);
		}

		Long workflowId = (Long)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}

		String solverExe = (String)attributes.get("solverExe");

		if (solverExe != null) {
			setSolverExe(solverExe);
		}

		String workingDir = (String)attributes.get("workingDir");

		if (workingDir != null) {
			setWorkingDir(workingDir);
		}

		String runType = (String)attributes.get("runType");

		if (runType != null) {
			setRunType(runType);
		}

		String logFileName = (String)attributes.get("logFileName");

		if (logFileName != null) {
			setLogFileName(logFileName);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String queueName = (String)attributes.get("queueName");

		if (queueName != null) {
			setQueueName(queueName);
		}

		String command = (String)attributes.get("command");

		if (command != null) {
			setCommand(command);
		}

		String referenceFiles = (String)attributes.get("referenceFiles");

		if (referenceFiles != null) {
			setReferenceFiles(referenceFiles);
		}

		String environmentVars = (String)attributes.get("environmentVars");

		if (environmentVars != null) {
			setEnvironmentVars(environmentVars);
		}

		Integer nodes = (Integer)attributes.get("nodes");

		if (nodes != null) {
			setNodes(nodes);
		}

		Integer processorsPerNode = (Integer)attributes.get("processorsPerNode");

		if (processorsPerNode != null) {
			setProcessorsPerNode(processorsPerNode);
		}

		String wallTime = (String)attributes.get("wallTime");

		if (wallTime != null) {
			setWallTime(wallTime);
		}

		String eligibleTime = (String)attributes.get("eligibleTime");

		if (eligibleTime != null) {
			setEligibleTime(eligibleTime);
		}

		String afterAny = (String)attributes.get("afterAny");

		if (afterAny != null) {
			setAfterAny(afterAny);
		}

		String afterOk = (String)attributes.get("afterOk");

		if (afterOk != null) {
			setAfterOk(afterOk);
		}

		String submitArgs = (String)attributes.get("submitArgs");

		if (submitArgs != null) {
			setSubmitArgs(submitArgs);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer jobStatus = (Integer)attributes.get("jobStatus");

		if (jobStatus != null) {
			setJobStatus(jobStatus);
		}

		Boolean reserveResults = (Boolean)attributes.get("reserveResults");

		if (reserveResults != null) {
			setReserveResults(reserveResults);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date queuedDate = (Date)attributes.get("queuedDate");

		if (queuedDate != null) {
			setQueuedDate(queuedDate);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date completeDate = (Date)attributes.get("completeDate");

		if (completeDate != null) {
			setCompleteDate(completeDate);
		}

		String usedMemory = (String)attributes.get("usedMemory");

		if (usedMemory != null) {
			setUsedMemory(usedMemory);
		}

		String usedCpuTime = (String)attributes.get("usedCpuTime");

		if (usedCpuTime != null) {
			setUsedCpuTime(usedCpuTime);
		}

		String usedWalltime = (String)attributes.get("usedWalltime");

		if (usedWalltime != null) {
			setUsedWalltime(usedWalltime);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_columnBitmask |= JOBID_COLUMN_BITMASK;

		if (!_setOriginalJobId) {
			_setOriginalJobId = true;

			_originalJobId = _jobId;
		}

		_jobId = jobId;
	}

	public long getOriginalJobId() {
		return _originalJobId;
	}

	@JSON
	@Override
	public String getJobName() {
		if (_jobName == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobName;
		}
	}

	@Override
	public void setJobName(String jobName) {
		_jobName = jobName;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getSimulationId() {
		return _simulationId;
	}

	@Override
	public void setSimulationId(long simulationId) {
		_columnBitmask |= SIMULATIONID_COLUMN_BITMASK;

		if (!_setOriginalSimulationId) {
			_setOriginalSimulationId = true;

			_originalSimulationId = _simulationId;
		}

		_simulationId = simulationId;
	}

	public long getOriginalSimulationId() {
		return _originalSimulationId;
	}

	@JSON
	@Override
	public long getSchedulerId() {
		return _schedulerId;
	}

	@Override
	public void setSchedulerId(long schedulerId) {
		_columnBitmask |= SCHEDULERID_COLUMN_BITMASK;

		if (!_setOriginalSchedulerId) {
			_setOriginalSchedulerId = true;

			_originalSchedulerId = _schedulerId;
		}

		_schedulerId = schedulerId;
	}

	public long getOriginalSchedulerId() {
		return _originalSchedulerId;
	}

	@JSON
	@Override
	public long getWorkflowId() {
		return _workflowId;
	}

	@Override
	public void setWorkflowId(long workflowId) {
		_workflowId = workflowId;
	}

	@JSON
	@Override
	public String getSolverExe() {
		if (_solverExe == null) {
			return StringPool.BLANK;
		}
		else {
			return _solverExe;
		}
	}

	@Override
	public void setSolverExe(String solverExe) {
		_solverExe = solverExe;
	}

	@JSON
	@Override
	public String getWorkingDir() {
		if (_workingDir == null) {
			return StringPool.BLANK;
		}
		else {
			return _workingDir;
		}
	}

	@Override
	public void setWorkingDir(String workingDir) {
		_workingDir = workingDir;
	}

	@JSON
	@Override
	public String getRunType() {
		if (_runType == null) {
			return StringPool.BLANK;
		}
		else {
			return _runType;
		}
	}

	@Override
	public void setRunType(String runType) {
		_columnBitmask |= RUNTYPE_COLUMN_BITMASK;

		if (_originalRunType == null) {
			_originalRunType = _runType;
		}

		_runType = runType;
	}

	public String getOriginalRunType() {
		return GetterUtil.getString(_originalRunType);
	}

	@JSON
	@Override
	public String getLogFileName() {
		if (_logFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _logFileName;
		}
	}

	@Override
	public void setLogFileName(String logFileName) {
		_logFileName = logFileName;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getQueueName() {
		if (_queueName == null) {
			return StringPool.BLANK;
		}
		else {
			return _queueName;
		}
	}

	@Override
	public void setQueueName(String queueName) {
		_columnBitmask |= QUEUENAME_COLUMN_BITMASK;

		if (_originalQueueName == null) {
			_originalQueueName = _queueName;
		}

		_queueName = queueName;
	}

	public String getOriginalQueueName() {
		return GetterUtil.getString(_originalQueueName);
	}

	@JSON
	@Override
	public String getCommand() {
		if (_command == null) {
			return StringPool.BLANK;
		}
		else {
			return _command;
		}
	}

	@Override
	public void setCommand(String command) {
		_command = command;
	}

	@JSON
	@Override
	public String getReferenceFiles() {
		if (_referenceFiles == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceFiles;
		}
	}

	@Override
	public void setReferenceFiles(String referenceFiles) {
		_referenceFiles = referenceFiles;
	}

	@JSON
	@Override
	public String getEnvironmentVars() {
		if (_environmentVars == null) {
			return StringPool.BLANK;
		}
		else {
			return _environmentVars;
		}
	}

	@Override
	public void setEnvironmentVars(String environmentVars) {
		_environmentVars = environmentVars;
	}

	@JSON
	@Override
	public int getNodes() {
		return _nodes;
	}

	@Override
	public void setNodes(int nodes) {
		_nodes = nodes;
	}

	@JSON
	@Override
	public int getProcessorsPerNode() {
		return _processorsPerNode;
	}

	@Override
	public void setProcessorsPerNode(int processorsPerNode) {
		_processorsPerNode = processorsPerNode;
	}

	@JSON
	@Override
	public String getWallTime() {
		if (_wallTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _wallTime;
		}
	}

	@Override
	public void setWallTime(String wallTime) {
		_wallTime = wallTime;
	}

	@JSON
	@Override
	public String getEligibleTime() {
		if (_eligibleTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _eligibleTime;
		}
	}

	@Override
	public void setEligibleTime(String eligibleTime) {
		_eligibleTime = eligibleTime;
	}

	@JSON
	@Override
	public String getAfterAny() {
		if (_afterAny == null) {
			return StringPool.BLANK;
		}
		else {
			return _afterAny;
		}
	}

	@Override
	public void setAfterAny(String afterAny) {
		_afterAny = afterAny;
	}

	@JSON
	@Override
	public String getAfterOk() {
		if (_afterOk == null) {
			return StringPool.BLANK;
		}
		else {
			return _afterOk;
		}
	}

	@Override
	public void setAfterOk(String afterOk) {
		_afterOk = afterOk;
	}

	@JSON
	@Override
	public String getSubmitArgs() {
		if (_submitArgs == null) {
			return StringPool.BLANK;
		}
		else {
			return _submitArgs;
		}
	}

	@Override
	public void setSubmitArgs(String submitArgs) {
		_submitArgs = submitArgs;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public int getJobStatus() {
		return _jobStatus;
	}

	@Override
	public void setJobStatus(int jobStatus) {
		_columnBitmask |= JOBSTATUS_COLUMN_BITMASK;

		if (!_setOriginalJobStatus) {
			_setOriginalJobStatus = true;

			_originalJobStatus = _jobStatus;
		}

		_jobStatus = jobStatus;
	}

	public int getOriginalJobStatus() {
		return _originalJobStatus;
	}

	@JSON
	@Override
	public boolean getReserveResults() {
		return _reserveResults;
	}

	@JSON
	@Override
	public boolean isReserveResults() {
		return _reserveResults;
	}

	@Override
	public void setReserveResults(boolean reserveResults) {
		_reserveResults = reserveResults;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getQueuedDate() {
		return _queuedDate;
	}

	@Override
	public void setQueuedDate(Date queuedDate) {
		_queuedDate = queuedDate;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getCompleteDate() {
		return _completeDate;
	}

	@Override
	public void setCompleteDate(Date completeDate) {
		_completeDate = completeDate;
	}

	@JSON
	@Override
	public String getUsedMemory() {
		if (_usedMemory == null) {
			return StringPool.BLANK;
		}
		else {
			return _usedMemory;
		}
	}

	@Override
	public void setUsedMemory(String usedMemory) {
		_usedMemory = usedMemory;
	}

	@JSON
	@Override
	public String getUsedCpuTime() {
		if (_usedCpuTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _usedCpuTime;
		}
	}

	@Override
	public void setUsedCpuTime(String usedCpuTime) {
		_usedCpuTime = usedCpuTime;
	}

	@JSON
	@Override
	public String getUsedWalltime() {
		if (_usedWalltime == null) {
			return StringPool.BLANK;
		}
		else {
			return _usedWalltime;
		}
	}

	@Override
	public void setUsedWalltime(String usedWalltime) {
		_usedWalltime = usedWalltime;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Job.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Job.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Job toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Job)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobImpl jobImpl = new JobImpl();

		jobImpl.setUuid(getUuid());
		jobImpl.setJobId(getJobId());
		jobImpl.setJobName(getJobName());
		jobImpl.setCompanyId(getCompanyId());
		jobImpl.setGroupId(getGroupId());
		jobImpl.setUserId(getUserId());
		jobImpl.setSimulationId(getSimulationId());
		jobImpl.setSchedulerId(getSchedulerId());
		jobImpl.setWorkflowId(getWorkflowId());
		jobImpl.setSolverExe(getSolverExe());
		jobImpl.setWorkingDir(getWorkingDir());
		jobImpl.setRunType(getRunType());
		jobImpl.setLogFileName(getLogFileName());
		jobImpl.setTitle(getTitle());
		jobImpl.setQueueName(getQueueName());
		jobImpl.setCommand(getCommand());
		jobImpl.setReferenceFiles(getReferenceFiles());
		jobImpl.setEnvironmentVars(getEnvironmentVars());
		jobImpl.setNodes(getNodes());
		jobImpl.setProcessorsPerNode(getProcessorsPerNode());
		jobImpl.setWallTime(getWallTime());
		jobImpl.setEligibleTime(getEligibleTime());
		jobImpl.setAfterAny(getAfterAny());
		jobImpl.setAfterOk(getAfterOk());
		jobImpl.setSubmitArgs(getSubmitArgs());
		jobImpl.setStatus(getStatus());
		jobImpl.setJobStatus(getJobStatus());
		jobImpl.setReserveResults(getReserveResults());
		jobImpl.setCreateDate(getCreateDate());
		jobImpl.setModifiedDate(getModifiedDate());
		jobImpl.setQueuedDate(getQueuedDate());
		jobImpl.setStartDate(getStartDate());
		jobImpl.setCompleteDate(getCompleteDate());
		jobImpl.setUsedMemory(getUsedMemory());
		jobImpl.setUsedCpuTime(getUsedCpuTime());
		jobImpl.setUsedWalltime(getUsedWalltime());

		jobImpl.resetOriginalValues();

		return jobImpl;
	}

	@Override
	public int compareTo(Job job) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), job.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Job)) {
			return false;
		}

		Job job = (Job)obj;

		long primaryKey = job.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		JobModelImpl jobModelImpl = this;

		jobModelImpl._originalUuid = jobModelImpl._uuid;

		jobModelImpl._originalJobId = jobModelImpl._jobId;

		jobModelImpl._setOriginalJobId = false;

		jobModelImpl._originalCompanyId = jobModelImpl._companyId;

		jobModelImpl._setOriginalCompanyId = false;

		jobModelImpl._originalGroupId = jobModelImpl._groupId;

		jobModelImpl._setOriginalGroupId = false;

		jobModelImpl._originalUserId = jobModelImpl._userId;

		jobModelImpl._setOriginalUserId = false;

		jobModelImpl._originalSimulationId = jobModelImpl._simulationId;

		jobModelImpl._setOriginalSimulationId = false;

		jobModelImpl._originalSchedulerId = jobModelImpl._schedulerId;

		jobModelImpl._setOriginalSchedulerId = false;

		jobModelImpl._originalRunType = jobModelImpl._runType;

		jobModelImpl._originalTitle = jobModelImpl._title;

		jobModelImpl._originalQueueName = jobModelImpl._queueName;

		jobModelImpl._originalStatus = jobModelImpl._status;

		jobModelImpl._setOriginalStatus = false;

		jobModelImpl._originalJobStatus = jobModelImpl._jobStatus;

		jobModelImpl._setOriginalJobStatus = false;

		jobModelImpl._setModifiedDate = false;

		jobModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Job> toCacheModel() {
		JobCacheModel jobCacheModel = new JobCacheModel();

		jobCacheModel.uuid = getUuid();

		String uuid = jobCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			jobCacheModel.uuid = null;
		}

		jobCacheModel.jobId = getJobId();

		jobCacheModel.jobName = getJobName();

		String jobName = jobCacheModel.jobName;

		if ((jobName != null) && (jobName.length() == 0)) {
			jobCacheModel.jobName = null;
		}

		jobCacheModel.companyId = getCompanyId();

		jobCacheModel.groupId = getGroupId();

		jobCacheModel.userId = getUserId();

		jobCacheModel.simulationId = getSimulationId();

		jobCacheModel.schedulerId = getSchedulerId();

		jobCacheModel.workflowId = getWorkflowId();

		jobCacheModel.solverExe = getSolverExe();

		String solverExe = jobCacheModel.solverExe;

		if ((solverExe != null) && (solverExe.length() == 0)) {
			jobCacheModel.solverExe = null;
		}

		jobCacheModel.workingDir = getWorkingDir();

		String workingDir = jobCacheModel.workingDir;

		if ((workingDir != null) && (workingDir.length() == 0)) {
			jobCacheModel.workingDir = null;
		}

		jobCacheModel.runType = getRunType();

		String runType = jobCacheModel.runType;

		if ((runType != null) && (runType.length() == 0)) {
			jobCacheModel.runType = null;
		}

		jobCacheModel.logFileName = getLogFileName();

		String logFileName = jobCacheModel.logFileName;

		if ((logFileName != null) && (logFileName.length() == 0)) {
			jobCacheModel.logFileName = null;
		}

		jobCacheModel.title = getTitle();

		String title = jobCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			jobCacheModel.title = null;
		}

		jobCacheModel.queueName = getQueueName();

		String queueName = jobCacheModel.queueName;

		if ((queueName != null) && (queueName.length() == 0)) {
			jobCacheModel.queueName = null;
		}

		jobCacheModel.command = getCommand();

		String command = jobCacheModel.command;

		if ((command != null) && (command.length() == 0)) {
			jobCacheModel.command = null;
		}

		jobCacheModel.referenceFiles = getReferenceFiles();

		String referenceFiles = jobCacheModel.referenceFiles;

		if ((referenceFiles != null) && (referenceFiles.length() == 0)) {
			jobCacheModel.referenceFiles = null;
		}

		jobCacheModel.environmentVars = getEnvironmentVars();

		String environmentVars = jobCacheModel.environmentVars;

		if ((environmentVars != null) && (environmentVars.length() == 0)) {
			jobCacheModel.environmentVars = null;
		}

		jobCacheModel.nodes = getNodes();

		jobCacheModel.processorsPerNode = getProcessorsPerNode();

		jobCacheModel.wallTime = getWallTime();

		String wallTime = jobCacheModel.wallTime;

		if ((wallTime != null) && (wallTime.length() == 0)) {
			jobCacheModel.wallTime = null;
		}

		jobCacheModel.eligibleTime = getEligibleTime();

		String eligibleTime = jobCacheModel.eligibleTime;

		if ((eligibleTime != null) && (eligibleTime.length() == 0)) {
			jobCacheModel.eligibleTime = null;
		}

		jobCacheModel.afterAny = getAfterAny();

		String afterAny = jobCacheModel.afterAny;

		if ((afterAny != null) && (afterAny.length() == 0)) {
			jobCacheModel.afterAny = null;
		}

		jobCacheModel.afterOk = getAfterOk();

		String afterOk = jobCacheModel.afterOk;

		if ((afterOk != null) && (afterOk.length() == 0)) {
			jobCacheModel.afterOk = null;
		}

		jobCacheModel.submitArgs = getSubmitArgs();

		String submitArgs = jobCacheModel.submitArgs;

		if ((submitArgs != null) && (submitArgs.length() == 0)) {
			jobCacheModel.submitArgs = null;
		}

		jobCacheModel.status = getStatus();

		jobCacheModel.jobStatus = getJobStatus();

		jobCacheModel.reserveResults = getReserveResults();

		Date createDate = getCreateDate();

		if (createDate != null) {
			jobCacheModel.createDate = createDate.getTime();
		}
		else {
			jobCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date queuedDate = getQueuedDate();

		if (queuedDate != null) {
			jobCacheModel.queuedDate = queuedDate.getTime();
		}
		else {
			jobCacheModel.queuedDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			jobCacheModel.startDate = startDate.getTime();
		}
		else {
			jobCacheModel.startDate = Long.MIN_VALUE;
		}

		Date completeDate = getCompleteDate();

		if (completeDate != null) {
			jobCacheModel.completeDate = completeDate.getTime();
		}
		else {
			jobCacheModel.completeDate = Long.MIN_VALUE;
		}

		jobCacheModel.usedMemory = getUsedMemory();

		String usedMemory = jobCacheModel.usedMemory;

		if ((usedMemory != null) && (usedMemory.length() == 0)) {
			jobCacheModel.usedMemory = null;
		}

		jobCacheModel.usedCpuTime = getUsedCpuTime();

		String usedCpuTime = jobCacheModel.usedCpuTime;

		if ((usedCpuTime != null) && (usedCpuTime.length() == 0)) {
			jobCacheModel.usedCpuTime = null;
		}

		jobCacheModel.usedWalltime = getUsedWalltime();

		String usedWalltime = jobCacheModel.usedWalltime;

		if ((usedWalltime != null) && (usedWalltime.length() == 0)) {
			jobCacheModel.usedWalltime = null;
		}

		return jobCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", jobId=");
		sb.append(getJobId());
		sb.append(", jobName=");
		sb.append(getJobName());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", simulationId=");
		sb.append(getSimulationId());
		sb.append(", schedulerId=");
		sb.append(getSchedulerId());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append(", solverExe=");
		sb.append(getSolverExe());
		sb.append(", workingDir=");
		sb.append(getWorkingDir());
		sb.append(", runType=");
		sb.append(getRunType());
		sb.append(", logFileName=");
		sb.append(getLogFileName());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", queueName=");
		sb.append(getQueueName());
		sb.append(", command=");
		sb.append(getCommand());
		sb.append(", referenceFiles=");
		sb.append(getReferenceFiles());
		sb.append(", environmentVars=");
		sb.append(getEnvironmentVars());
		sb.append(", nodes=");
		sb.append(getNodes());
		sb.append(", processorsPerNode=");
		sb.append(getProcessorsPerNode());
		sb.append(", wallTime=");
		sb.append(getWallTime());
		sb.append(", eligibleTime=");
		sb.append(getEligibleTime());
		sb.append(", afterAny=");
		sb.append(getAfterAny());
		sb.append(", afterOk=");
		sb.append(getAfterOk());
		sb.append(", submitArgs=");
		sb.append(getSubmitArgs());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", jobStatus=");
		sb.append(getJobStatus());
		sb.append(", reserveResults=");
		sb.append(getReserveResults());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", queuedDate=");
		sb.append(getQueuedDate());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", completeDate=");
		sb.append(getCompleteDate());
		sb.append(", usedMemory=");
		sb.append(getUsedMemory());
		sb.append(", usedCpuTime=");
		sb.append(getUsedCpuTime());
		sb.append(", usedWalltime=");
		sb.append(getUsedWalltime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icebreaker.model.Job");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobName</column-name><column-value><![CDATA[");
		sb.append(getJobName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationId</column-name><column-value><![CDATA[");
		sb.append(getSimulationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulerId</column-name><column-value><![CDATA[");
		sb.append(getSchedulerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>solverExe</column-name><column-value><![CDATA[");
		sb.append(getSolverExe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingDir</column-name><column-value><![CDATA[");
		sb.append(getWorkingDir());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>runType</column-name><column-value><![CDATA[");
		sb.append(getRunType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logFileName</column-name><column-value><![CDATA[");
		sb.append(getLogFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queueName</column-name><column-value><![CDATA[");
		sb.append(getQueueName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>command</column-name><column-value><![CDATA[");
		sb.append(getCommand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceFiles</column-name><column-value><![CDATA[");
		sb.append(getReferenceFiles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>environmentVars</column-name><column-value><![CDATA[");
		sb.append(getEnvironmentVars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodes</column-name><column-value><![CDATA[");
		sb.append(getNodes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processorsPerNode</column-name><column-value><![CDATA[");
		sb.append(getProcessorsPerNode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wallTime</column-name><column-value><![CDATA[");
		sb.append(getWallTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eligibleTime</column-name><column-value><![CDATA[");
		sb.append(getEligibleTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>afterAny</column-name><column-value><![CDATA[");
		sb.append(getAfterAny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>afterOk</column-name><column-value><![CDATA[");
		sb.append(getAfterOk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitArgs</column-name><column-value><![CDATA[");
		sb.append(getSubmitArgs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobStatus</column-name><column-value><![CDATA[");
		sb.append(getJobStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reserveResults</column-name><column-value><![CDATA[");
		sb.append(getReserveResults());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queuedDate</column-name><column-value><![CDATA[");
		sb.append(getQueuedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completeDate</column-name><column-value><![CDATA[");
		sb.append(getCompleteDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedMemory</column-name><column-value><![CDATA[");
		sb.append(getUsedMemory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedCpuTime</column-name><column-value><![CDATA[");
		sb.append(getUsedCpuTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedWalltime</column-name><column-value><![CDATA[");
		sb.append(getUsedWalltime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Job.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Job.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _jobId;
	private long _originalJobId;
	private boolean _setOriginalJobId;
	private String _jobName;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _simulationId;
	private long _originalSimulationId;
	private boolean _setOriginalSimulationId;
	private long _schedulerId;
	private long _originalSchedulerId;
	private boolean _setOriginalSchedulerId;
	private long _workflowId;
	private String _solverExe;
	private String _workingDir;
	private String _runType;
	private String _originalRunType;
	private String _logFileName;
	private String _title;
	private String _originalTitle;
	private String _queueName;
	private String _originalQueueName;
	private String _command;
	private String _referenceFiles;
	private String _environmentVars;
	private int _nodes;
	private int _processorsPerNode;
	private String _wallTime;
	private String _eligibleTime;
	private String _afterAny;
	private String _afterOk;
	private String _submitArgs;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private int _jobStatus;
	private int _originalJobStatus;
	private boolean _setOriginalJobStatus;
	private boolean _reserveResults;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _queuedDate;
	private Date _startDate;
	private Date _completeDate;
	private String _usedMemory;
	private String _usedCpuTime;
	private String _usedWalltime;
	private long _columnBitmask;
	private Job _escapedModel;
}