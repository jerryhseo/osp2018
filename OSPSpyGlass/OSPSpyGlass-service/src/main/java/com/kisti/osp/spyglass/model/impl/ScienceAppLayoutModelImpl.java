/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.spyglass.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.spyglass.model.ScienceAppLayout;
import com.kisti.osp.spyglass.model.ScienceAppLayoutModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppLayout service. Represents a row in the &quot;spyglass_ScienceAppLayout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ScienceAppLayoutModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppLayoutImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see ScienceAppLayoutImpl
 * @see ScienceAppLayout
 * @see ScienceAppLayoutModel
 * @generated
 */
@ProviderType
public class ScienceAppLayoutModelImpl extends BaseModelImpl<ScienceAppLayout>
	implements ScienceAppLayoutModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app layout model instance should use the {@link ScienceAppLayout} interface instead.
	 */
	public static final String TABLE_NAME = "spyglass_ScienceAppLayout";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "layout", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("scienceAppId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("layout", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table spyglass_ScienceAppLayout (scienceAppId LONG not null primary key,layout VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table spyglass_ScienceAppLayout";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppLayout.scienceAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY spyglass_ScienceAppLayout.scienceAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.spyglass.model.ScienceAppLayout"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.spyglass.model.ScienceAppLayout"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.spyglass.model.ScienceAppLayout"));

	public ScienceAppLayoutModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScienceAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppLayout.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppLayout.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("layout", getLayout());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		String layout = (String)attributes.get("layout");

		if (layout != null) {
			setLayout(layout);
		}
	}

	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@Override
	public String getLayout() {
		if (_layout == null) {
			return StringPool.BLANK;
		}
		else {
			return _layout;
		}
	}

	@Override
	public void setLayout(String layout) {
		_layout = layout;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScienceAppLayout.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ScienceAppLayout toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppLayout)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppLayoutImpl scienceAppLayoutImpl = new ScienceAppLayoutImpl();

		scienceAppLayoutImpl.setScienceAppId(getScienceAppId());
		scienceAppLayoutImpl.setLayout(getLayout());

		scienceAppLayoutImpl.resetOriginalValues();

		return scienceAppLayoutImpl;
	}

	@Override
	public int compareTo(ScienceAppLayout scienceAppLayout) {
		long primaryKey = scienceAppLayout.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppLayout)) {
			return false;
		}

		ScienceAppLayout scienceAppLayout = (ScienceAppLayout)obj;

		long primaryKey = scienceAppLayout.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ScienceAppLayout> toCacheModel() {
		ScienceAppLayoutCacheModel scienceAppLayoutCacheModel = new ScienceAppLayoutCacheModel();

		scienceAppLayoutCacheModel.scienceAppId = getScienceAppId();

		scienceAppLayoutCacheModel.layout = getLayout();

		String layout = scienceAppLayoutCacheModel.layout;

		if ((layout != null) && (layout.length() == 0)) {
			scienceAppLayoutCacheModel.layout = null;
		}

		return scienceAppLayoutCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", layout=");
		sb.append(getLayout());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.spyglass.model.ScienceAppLayout");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>layout</column-name><column-value><![CDATA[");
		sb.append(getLayout());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ScienceAppLayout.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppLayout.class
		};
	private long _scienceAppId;
	private String _layout;
	private ScienceAppLayout _escapedModel;
}