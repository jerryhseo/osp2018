/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.spyglass.service.base;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.spyglass.model.ScienceAppLayout;
import com.kisti.osp.spyglass.service.ScienceAppLayoutLocalService;
import com.kisti.osp.spyglass.service.persistence.ScienceAppInputPortsPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppLayoutPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppLogPortsPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppManagerPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppOutputPortsPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppPersistence;
import com.kisti.osp.spyglass.service.persistence.ScienceAppWorkflowPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the science app layout local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.kisti.osp.spyglass.service.impl.ScienceAppLayoutLocalServiceImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see com.kisti.osp.spyglass.service.impl.ScienceAppLayoutLocalServiceImpl
 * @see com.kisti.osp.spyglass.service.ScienceAppLayoutLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ScienceAppLayoutLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ScienceAppLayoutLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.kisti.osp.spyglass.service.ScienceAppLayoutLocalServiceUtil} to access the science app layout local service.
	 */

	/**
	 * Adds the science app layout to the database. Also notifies the appropriate model listeners.
	 *
	 * @param scienceAppLayout the science app layout
	 * @return the science app layout that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ScienceAppLayout addScienceAppLayout(
		ScienceAppLayout scienceAppLayout) {
		scienceAppLayout.setNew(true);

		return scienceAppLayoutPersistence.update(scienceAppLayout);
	}

	/**
	 * Creates a new science app layout with the primary key. Does not add the science app layout to the database.
	 *
	 * @param scienceAppId the primary key for the new science app layout
	 * @return the new science app layout
	 */
	@Override
	public ScienceAppLayout createScienceAppLayout(long scienceAppId) {
		return scienceAppLayoutPersistence.create(scienceAppId);
	}

	/**
	 * Deletes the science app layout with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param scienceAppId the primary key of the science app layout
	 * @return the science app layout that was removed
	 * @throws PortalException if a science app layout with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ScienceAppLayout deleteScienceAppLayout(long scienceAppId)
		throws PortalException {
		return scienceAppLayoutPersistence.remove(scienceAppId);
	}

	/**
	 * Deletes the science app layout from the database. Also notifies the appropriate model listeners.
	 *
	 * @param scienceAppLayout the science app layout
	 * @return the science app layout that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ScienceAppLayout deleteScienceAppLayout(
		ScienceAppLayout scienceAppLayout) {
		return scienceAppLayoutPersistence.remove(scienceAppLayout);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ScienceAppLayout.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return scienceAppLayoutPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.kisti.osp.spyglass.model.impl.ScienceAppLayoutModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return scienceAppLayoutPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.kisti.osp.spyglass.model.impl.ScienceAppLayoutModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return scienceAppLayoutPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return scienceAppLayoutPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return scienceAppLayoutPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ScienceAppLayout fetchScienceAppLayout(long scienceAppId) {
		return scienceAppLayoutPersistence.fetchByPrimaryKey(scienceAppId);
	}

	/**
	 * Returns the science app layout with the primary key.
	 *
	 * @param scienceAppId the primary key of the science app layout
	 * @return the science app layout
	 * @throws PortalException if a science app layout with the primary key could not be found
	 */
	@Override
	public ScienceAppLayout getScienceAppLayout(long scienceAppId)
		throws PortalException {
		return scienceAppLayoutPersistence.findByPrimaryKey(scienceAppId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(scienceAppLayoutLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ScienceAppLayout.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("scienceAppId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(scienceAppLayoutLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ScienceAppLayout.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"scienceAppId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(scienceAppLayoutLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ScienceAppLayout.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("scienceAppId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return scienceAppLayoutLocalService.deleteScienceAppLayout((ScienceAppLayout)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return scienceAppLayoutPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the science app layouts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.kisti.osp.spyglass.model.impl.ScienceAppLayoutModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of science app layouts
	 * @param end the upper bound of the range of science app layouts (not inclusive)
	 * @return the range of science app layouts
	 */
	@Override
	public List<ScienceAppLayout> getScienceAppLayouts(int start, int end) {
		return scienceAppLayoutPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of science app layouts.
	 *
	 * @return the number of science app layouts
	 */
	@Override
	public int getScienceAppLayoutsCount() {
		return scienceAppLayoutPersistence.countAll();
	}

	/**
	 * Updates the science app layout in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param scienceAppLayout the science app layout
	 * @return the science app layout that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ScienceAppLayout updateScienceAppLayout(
		ScienceAppLayout scienceAppLayout) {
		return scienceAppLayoutPersistence.update(scienceAppLayout);
	}

	/**
	 * Returns the science app local service.
	 *
	 * @return the science app local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppLocalService getScienceAppLocalService() {
		return scienceAppLocalService;
	}

	/**
	 * Sets the science app local service.
	 *
	 * @param scienceAppLocalService the science app local service
	 */
	public void setScienceAppLocalService(
		com.kisti.osp.spyglass.service.ScienceAppLocalService scienceAppLocalService) {
		this.scienceAppLocalService = scienceAppLocalService;
	}

	/**
	 * Returns the science app persistence.
	 *
	 * @return the science app persistence
	 */
	public ScienceAppPersistence getScienceAppPersistence() {
		return scienceAppPersistence;
	}

	/**
	 * Sets the science app persistence.
	 *
	 * @param scienceAppPersistence the science app persistence
	 */
	public void setScienceAppPersistence(
		ScienceAppPersistence scienceAppPersistence) {
		this.scienceAppPersistence = scienceAppPersistence;
	}

	/**
	 * Returns the science app input ports local service.
	 *
	 * @return the science app input ports local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppInputPortsLocalService getScienceAppInputPortsLocalService() {
		return scienceAppInputPortsLocalService;
	}

	/**
	 * Sets the science app input ports local service.
	 *
	 * @param scienceAppInputPortsLocalService the science app input ports local service
	 */
	public void setScienceAppInputPortsLocalService(
		com.kisti.osp.spyglass.service.ScienceAppInputPortsLocalService scienceAppInputPortsLocalService) {
		this.scienceAppInputPortsLocalService = scienceAppInputPortsLocalService;
	}

	/**
	 * Returns the science app input ports persistence.
	 *
	 * @return the science app input ports persistence
	 */
	public ScienceAppInputPortsPersistence getScienceAppInputPortsPersistence() {
		return scienceAppInputPortsPersistence;
	}

	/**
	 * Sets the science app input ports persistence.
	 *
	 * @param scienceAppInputPortsPersistence the science app input ports persistence
	 */
	public void setScienceAppInputPortsPersistence(
		ScienceAppInputPortsPersistence scienceAppInputPortsPersistence) {
		this.scienceAppInputPortsPersistence = scienceAppInputPortsPersistence;
	}

	/**
	 * Returns the science app layout local service.
	 *
	 * @return the science app layout local service
	 */
	public ScienceAppLayoutLocalService getScienceAppLayoutLocalService() {
		return scienceAppLayoutLocalService;
	}

	/**
	 * Sets the science app layout local service.
	 *
	 * @param scienceAppLayoutLocalService the science app layout local service
	 */
	public void setScienceAppLayoutLocalService(
		ScienceAppLayoutLocalService scienceAppLayoutLocalService) {
		this.scienceAppLayoutLocalService = scienceAppLayoutLocalService;
	}

	/**
	 * Returns the science app layout persistence.
	 *
	 * @return the science app layout persistence
	 */
	public ScienceAppLayoutPersistence getScienceAppLayoutPersistence() {
		return scienceAppLayoutPersistence;
	}

	/**
	 * Sets the science app layout persistence.
	 *
	 * @param scienceAppLayoutPersistence the science app layout persistence
	 */
	public void setScienceAppLayoutPersistence(
		ScienceAppLayoutPersistence scienceAppLayoutPersistence) {
		this.scienceAppLayoutPersistence = scienceAppLayoutPersistence;
	}

	/**
	 * Returns the science app log ports local service.
	 *
	 * @return the science app log ports local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppLogPortsLocalService getScienceAppLogPortsLocalService() {
		return scienceAppLogPortsLocalService;
	}

	/**
	 * Sets the science app log ports local service.
	 *
	 * @param scienceAppLogPortsLocalService the science app log ports local service
	 */
	public void setScienceAppLogPortsLocalService(
		com.kisti.osp.spyglass.service.ScienceAppLogPortsLocalService scienceAppLogPortsLocalService) {
		this.scienceAppLogPortsLocalService = scienceAppLogPortsLocalService;
	}

	/**
	 * Returns the science app log ports persistence.
	 *
	 * @return the science app log ports persistence
	 */
	public ScienceAppLogPortsPersistence getScienceAppLogPortsPersistence() {
		return scienceAppLogPortsPersistence;
	}

	/**
	 * Sets the science app log ports persistence.
	 *
	 * @param scienceAppLogPortsPersistence the science app log ports persistence
	 */
	public void setScienceAppLogPortsPersistence(
		ScienceAppLogPortsPersistence scienceAppLogPortsPersistence) {
		this.scienceAppLogPortsPersistence = scienceAppLogPortsPersistence;
	}

	/**
	 * Returns the science app manager local service.
	 *
	 * @return the science app manager local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppManagerLocalService getScienceAppManagerLocalService() {
		return scienceAppManagerLocalService;
	}

	/**
	 * Sets the science app manager local service.
	 *
	 * @param scienceAppManagerLocalService the science app manager local service
	 */
	public void setScienceAppManagerLocalService(
		com.kisti.osp.spyglass.service.ScienceAppManagerLocalService scienceAppManagerLocalService) {
		this.scienceAppManagerLocalService = scienceAppManagerLocalService;
	}

	/**
	 * Returns the science app manager persistence.
	 *
	 * @return the science app manager persistence
	 */
	public ScienceAppManagerPersistence getScienceAppManagerPersistence() {
		return scienceAppManagerPersistence;
	}

	/**
	 * Sets the science app manager persistence.
	 *
	 * @param scienceAppManagerPersistence the science app manager persistence
	 */
	public void setScienceAppManagerPersistence(
		ScienceAppManagerPersistence scienceAppManagerPersistence) {
		this.scienceAppManagerPersistence = scienceAppManagerPersistence;
	}

	/**
	 * Returns the science app output ports local service.
	 *
	 * @return the science app output ports local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppOutputPortsLocalService getScienceAppOutputPortsLocalService() {
		return scienceAppOutputPortsLocalService;
	}

	/**
	 * Sets the science app output ports local service.
	 *
	 * @param scienceAppOutputPortsLocalService the science app output ports local service
	 */
	public void setScienceAppOutputPortsLocalService(
		com.kisti.osp.spyglass.service.ScienceAppOutputPortsLocalService scienceAppOutputPortsLocalService) {
		this.scienceAppOutputPortsLocalService = scienceAppOutputPortsLocalService;
	}

	/**
	 * Returns the science app output ports persistence.
	 *
	 * @return the science app output ports persistence
	 */
	public ScienceAppOutputPortsPersistence getScienceAppOutputPortsPersistence() {
		return scienceAppOutputPortsPersistence;
	}

	/**
	 * Sets the science app output ports persistence.
	 *
	 * @param scienceAppOutputPortsPersistence the science app output ports persistence
	 */
	public void setScienceAppOutputPortsPersistence(
		ScienceAppOutputPortsPersistence scienceAppOutputPortsPersistence) {
		this.scienceAppOutputPortsPersistence = scienceAppOutputPortsPersistence;
	}

	/**
	 * Returns the science app workflow local service.
	 *
	 * @return the science app workflow local service
	 */
	public com.kisti.osp.spyglass.service.ScienceAppWorkflowLocalService getScienceAppWorkflowLocalService() {
		return scienceAppWorkflowLocalService;
	}

	/**
	 * Sets the science app workflow local service.
	 *
	 * @param scienceAppWorkflowLocalService the science app workflow local service
	 */
	public void setScienceAppWorkflowLocalService(
		com.kisti.osp.spyglass.service.ScienceAppWorkflowLocalService scienceAppWorkflowLocalService) {
		this.scienceAppWorkflowLocalService = scienceAppWorkflowLocalService;
	}

	/**
	 * Returns the science app workflow persistence.
	 *
	 * @return the science app workflow persistence
	 */
	public ScienceAppWorkflowPersistence getScienceAppWorkflowPersistence() {
		return scienceAppWorkflowPersistence;
	}

	/**
	 * Sets the science app workflow persistence.
	 *
	 * @param scienceAppWorkflowPersistence the science app workflow persistence
	 */
	public void setScienceAppWorkflowPersistence(
		ScienceAppWorkflowPersistence scienceAppWorkflowPersistence) {
		this.scienceAppWorkflowPersistence = scienceAppWorkflowPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.kisti.osp.spyglass.model.ScienceAppLayout",
			scienceAppLayoutLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.kisti.osp.spyglass.model.ScienceAppLayout");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ScienceAppLayoutLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ScienceAppLayout.class;
	}

	protected String getModelClassName() {
		return ScienceAppLayout.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = scienceAppLayoutPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppLocalService scienceAppLocalService;
	@BeanReference(type = ScienceAppPersistence.class)
	protected ScienceAppPersistence scienceAppPersistence;
	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppInputPortsLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppInputPortsLocalService scienceAppInputPortsLocalService;
	@BeanReference(type = ScienceAppInputPortsPersistence.class)
	protected ScienceAppInputPortsPersistence scienceAppInputPortsPersistence;
	@BeanReference(type = ScienceAppLayoutLocalService.class)
	protected ScienceAppLayoutLocalService scienceAppLayoutLocalService;
	@BeanReference(type = ScienceAppLayoutPersistence.class)
	protected ScienceAppLayoutPersistence scienceAppLayoutPersistence;
	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppLogPortsLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppLogPortsLocalService scienceAppLogPortsLocalService;
	@BeanReference(type = ScienceAppLogPortsPersistence.class)
	protected ScienceAppLogPortsPersistence scienceAppLogPortsPersistence;
	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppManagerLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppManagerLocalService scienceAppManagerLocalService;
	@BeanReference(type = ScienceAppManagerPersistence.class)
	protected ScienceAppManagerPersistence scienceAppManagerPersistence;
	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppOutputPortsLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppOutputPortsLocalService scienceAppOutputPortsLocalService;
	@BeanReference(type = ScienceAppOutputPortsPersistence.class)
	protected ScienceAppOutputPortsPersistence scienceAppOutputPortsPersistence;
	@BeanReference(type = com.kisti.osp.spyglass.service.ScienceAppWorkflowLocalService.class)
	protected com.kisti.osp.spyglass.service.ScienceAppWorkflowLocalService scienceAppWorkflowLocalService;
	@BeanReference(type = ScienceAppWorkflowPersistence.class)
	protected ScienceAppWorkflowPersistence scienceAppWorkflowPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}