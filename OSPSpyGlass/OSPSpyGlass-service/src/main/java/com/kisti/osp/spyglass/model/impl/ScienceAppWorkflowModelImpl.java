/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.spyglass.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.kisti.osp.spyglass.model.ScienceAppWorkflow;
import com.kisti.osp.spyglass.model.ScienceAppWorkflowModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppWorkflow service. Represents a row in the &quot;spyglass_ScienceAppWorkflow&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ScienceAppWorkflowModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppWorkflowImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see ScienceAppWorkflowImpl
 * @see ScienceAppWorkflow
 * @see ScienceAppWorkflowModel
 * @generated
 */
@ProviderType
public class ScienceAppWorkflowModelImpl extends BaseModelImpl<ScienceAppWorkflow>
	implements ScienceAppWorkflowModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app workflow model instance should use the {@link ScienceAppWorkflow} interface instead.
	 */
	public static final String TABLE_NAME = "spyglass_ScienceAppWorkflow";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "definition", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("scienceAppId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("definition", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table spyglass_ScienceAppWorkflow (scienceAppId LONG not null primary key,definition VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table spyglass_ScienceAppWorkflow";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppWorkflow.scienceAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY spyglass_ScienceAppWorkflow.scienceAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.spyglass.model.ScienceAppWorkflow"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.spyglass.model.ScienceAppWorkflow"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.kisti.osp.spyglass.service.util.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.spyglass.model.ScienceAppWorkflow"));

	public ScienceAppWorkflowModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScienceAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppWorkflow.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppWorkflow.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("definition", getDefinition());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		String definition = (String)attributes.get("definition");

		if (definition != null) {
			setDefinition(definition);
		}
	}

	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@Override
	public String getDefinition() {
		if (_definition == null) {
			return StringPool.BLANK;
		}
		else {
			return _definition;
		}
	}

	@Override
	public void setDefinition(String definition) {
		_definition = definition;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScienceAppWorkflow.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ScienceAppWorkflow toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppWorkflow)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppWorkflowImpl scienceAppWorkflowImpl = new ScienceAppWorkflowImpl();

		scienceAppWorkflowImpl.setScienceAppId(getScienceAppId());
		scienceAppWorkflowImpl.setDefinition(getDefinition());

		scienceAppWorkflowImpl.resetOriginalValues();

		return scienceAppWorkflowImpl;
	}

	@Override
	public int compareTo(ScienceAppWorkflow scienceAppWorkflow) {
		long primaryKey = scienceAppWorkflow.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppWorkflow)) {
			return false;
		}

		ScienceAppWorkflow scienceAppWorkflow = (ScienceAppWorkflow)obj;

		long primaryKey = scienceAppWorkflow.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ScienceAppWorkflow> toCacheModel() {
		ScienceAppWorkflowCacheModel scienceAppWorkflowCacheModel = new ScienceAppWorkflowCacheModel();

		scienceAppWorkflowCacheModel.scienceAppId = getScienceAppId();

		scienceAppWorkflowCacheModel.definition = getDefinition();

		String definition = scienceAppWorkflowCacheModel.definition;

		if ((definition != null) && (definition.length() == 0)) {
			scienceAppWorkflowCacheModel.definition = null;
		}

		return scienceAppWorkflowCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", definition=");
		sb.append(getDefinition());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.spyglass.model.ScienceAppWorkflow");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>definition</column-name><column-value><![CDATA[");
		sb.append(getDefinition());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ScienceAppWorkflow.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppWorkflow.class
		};
	private long _scienceAppId;
	private String _definition;
	private ScienceAppWorkflow _escapedModel;
}