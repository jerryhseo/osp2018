/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package OSPIcecap.model.impl;

import OSPIcecap.model.DataTypeAnalyzerLink;
import OSPIcecap.model.DataTypeAnalyzerLinkModel;
import OSPIcecap.model.DataTypeAnalyzerLinkSoap;

import OSPIcecap.service.persistence.DataTypeAnalyzerLinkPK;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataTypeAnalyzerLink service. Represents a row in the &quot;icecap_DataTypeAnalyzerLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DataTypeAnalyzerLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeAnalyzerLinkImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataTypeAnalyzerLinkImpl
 * @see DataTypeAnalyzerLink
 * @see DataTypeAnalyzerLinkModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DataTypeAnalyzerLinkModelImpl extends BaseModelImpl<DataTypeAnalyzerLink>
	implements DataTypeAnalyzerLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type analyzer link model instance should use the {@link DataTypeAnalyzerLink} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataTypeAnalyzerLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "linkId", Types.BIGINT },
			{ "typeId", Types.BIGINT },
			{ "analyzerId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("linkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("analyzerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table icecap_DataTypeAnalyzerLink (linkId LONG not null,typeId LONG,analyzerId LONG not null,primary key (linkId, analyzerId))";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataTypeAnalyzerLink";
	public static final String ORDER_BY_JPQL = " ORDER BY dataTypeAnalyzerLink.id.linkId ASC, dataTypeAnalyzerLink.id.analyzerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataTypeAnalyzerLink.linkId ASC, icecap_DataTypeAnalyzerLink.analyzerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(OSPIcecap.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.OSPIcecap.model.DataTypeAnalyzerLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(OSPIcecap.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.OSPIcecap.model.DataTypeAnalyzerLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(OSPIcecap.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.OSPIcecap.model.DataTypeAnalyzerLink"),
			true);
	public static final long ANALYZERID_COLUMN_BITMASK = 1L;
	public static final long TYPEID_COLUMN_BITMASK = 2L;
	public static final long LINKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataTypeAnalyzerLink toModel(
		DataTypeAnalyzerLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataTypeAnalyzerLink model = new DataTypeAnalyzerLinkImpl();

		model.setLinkId(soapModel.getLinkId());
		model.setTypeId(soapModel.getTypeId());
		model.setAnalyzerId(soapModel.getAnalyzerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataTypeAnalyzerLink> toModels(
		DataTypeAnalyzerLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataTypeAnalyzerLink> models = new ArrayList<DataTypeAnalyzerLink>(soapModels.length);

		for (DataTypeAnalyzerLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(OSPIcecap.service.util.ServiceProps.get(
				"lock.expiration.time.OSPIcecap.model.DataTypeAnalyzerLink"));

	public DataTypeAnalyzerLinkModelImpl() {
	}

	@Override
	public DataTypeAnalyzerLinkPK getPrimaryKey() {
		return new DataTypeAnalyzerLinkPK(_linkId, _analyzerId);
	}

	@Override
	public void setPrimaryKey(DataTypeAnalyzerLinkPK primaryKey) {
		setLinkId(primaryKey.linkId);
		setAnalyzerId(primaryKey.analyzerId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DataTypeAnalyzerLinkPK(_linkId, _analyzerId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DataTypeAnalyzerLinkPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DataTypeAnalyzerLink.class;
	}

	@Override
	public String getModelClassName() {
		return DataTypeAnalyzerLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("linkId", getLinkId());
		attributes.put("typeId", getTypeId());
		attributes.put("analyzerId", getAnalyzerId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long linkId = (Long)attributes.get("linkId");

		if (linkId != null) {
			setLinkId(linkId);
		}

		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long analyzerId = (Long)attributes.get("analyzerId");

		if (analyzerId != null) {
			setAnalyzerId(analyzerId);
		}
	}

	@JSON
	@Override
	public long getLinkId() {
		return _linkId;
	}

	@Override
	public void setLinkId(long linkId) {
		_linkId = linkId;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getAnalyzerId() {
		return _analyzerId;
	}

	@Override
	public void setAnalyzerId(long analyzerId) {
		_columnBitmask |= ANALYZERID_COLUMN_BITMASK;

		if (!_setOriginalAnalyzerId) {
			_setOriginalAnalyzerId = true;

			_originalAnalyzerId = _analyzerId;
		}

		_analyzerId = analyzerId;
	}

	public long getOriginalAnalyzerId() {
		return _originalAnalyzerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DataTypeAnalyzerLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataTypeAnalyzerLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeAnalyzerLinkImpl dataTypeAnalyzerLinkImpl = new DataTypeAnalyzerLinkImpl();

		dataTypeAnalyzerLinkImpl.setLinkId(getLinkId());
		dataTypeAnalyzerLinkImpl.setTypeId(getTypeId());
		dataTypeAnalyzerLinkImpl.setAnalyzerId(getAnalyzerId());

		dataTypeAnalyzerLinkImpl.resetOriginalValues();

		return dataTypeAnalyzerLinkImpl;
	}

	@Override
	public int compareTo(DataTypeAnalyzerLink dataTypeAnalyzerLink) {
		DataTypeAnalyzerLinkPK primaryKey = dataTypeAnalyzerLink.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataTypeAnalyzerLink)) {
			return false;
		}

		DataTypeAnalyzerLink dataTypeAnalyzerLink = (DataTypeAnalyzerLink)obj;

		DataTypeAnalyzerLinkPK primaryKey = dataTypeAnalyzerLink.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DataTypeAnalyzerLinkModelImpl dataTypeAnalyzerLinkModelImpl = this;

		dataTypeAnalyzerLinkModelImpl._originalTypeId = dataTypeAnalyzerLinkModelImpl._typeId;

		dataTypeAnalyzerLinkModelImpl._setOriginalTypeId = false;

		dataTypeAnalyzerLinkModelImpl._originalAnalyzerId = dataTypeAnalyzerLinkModelImpl._analyzerId;

		dataTypeAnalyzerLinkModelImpl._setOriginalAnalyzerId = false;

		dataTypeAnalyzerLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataTypeAnalyzerLink> toCacheModel() {
		DataTypeAnalyzerLinkCacheModel dataTypeAnalyzerLinkCacheModel = new DataTypeAnalyzerLinkCacheModel();

		dataTypeAnalyzerLinkCacheModel.dataTypeAnalyzerLinkPK = getPrimaryKey();

		dataTypeAnalyzerLinkCacheModel.linkId = getLinkId();

		dataTypeAnalyzerLinkCacheModel.typeId = getTypeId();

		dataTypeAnalyzerLinkCacheModel.analyzerId = getAnalyzerId();

		return dataTypeAnalyzerLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{linkId=");
		sb.append(getLinkId());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", analyzerId=");
		sb.append(getAnalyzerId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("OSPIcecap.model.DataTypeAnalyzerLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>linkId</column-name><column-value><![CDATA[");
		sb.append(getLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analyzerId</column-name><column-value><![CDATA[");
		sb.append(getAnalyzerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DataTypeAnalyzerLink.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DataTypeAnalyzerLink.class
		};
	private long _linkId;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _analyzerId;
	private long _originalAnalyzerId;
	private boolean _setOriginalAnalyzerId;
	private long _columnBitmask;
	private DataTypeAnalyzerLink _escapedModel;
}